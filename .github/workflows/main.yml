# This is a basic workflow to help you get started with Actions

name: Pc/Desktop + Release

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  PROJECT_NAME: VsDavePlusReformed
  REPO_PATH:  MatthewFro191919/Dave-and-Bambi-Plus-Reformed-riolubfskins-Mobile-4

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  get-commit-hash:
    runs-on: ubuntu-latest
    outputs:
      commit_hash: ${{ steps.get_commit_hash.outputs.COMMIT_HASH }}
    steps:
      - name: Check Repository
        run: |
          echo "GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
          echo "REPO_PATH: ${{ env.REPO_PATH }}"
          if [[ "$GITHUB_REPOSITORY" != "${{ env.REPO_PATH }}" ]]; then
            echo "Doesn't seem to be correct, returning SIGABRT..."
            exit 6
          else
            echo "Seems to be correct..."
          fi

      - name: Get latest commit hash
        id: get_commit_hash
        run: |
          commit_hash=${GITHUB_SHA::7}
          echo "Latest commit hash is $commit_hash"
          echo "::set-output name=COMMIT_HASH::$commit_hash"

  Desktop:
    name: ${{ matrix.name }}
    needs: get-commit-hash
    strategy:
      matrix:
        include:
          - name: Windows
            os: windows-latest
            buildArgs: "windows -D officialBuild"
            setupCommand: .\"setup/windows.bat"
            artifactName: windowsBuild
            artifactPath: "export/release/windows/bin/*.exe"
    uses: ./.github/workflows/build.yml
    with:
        name: ${{ matrix.name }}
        os: ${{ matrix.os }}
        setupCommand: ${{ matrix.setupCommand }}
        buildArgs: ${{ matrix.buildArgs }}
        artifactName: ${{ matrix.artifactName }}
        artifactPath: ${{ matrix.artifactPath }}
  Releaser:
  name: Upload a Build Artifact
  uses: actions/upload-artifact@v4.6.0
  with:
    # Artifact name
    name: # optional, default is artifact
    # A file, directory or wildcard pattern that describes what to upload
    path: 
    # The desired behavior if no files are found using the provided path.
Available Options:
  warn: Output a warning but do not fail the action
  error: Fail the action with an error message
  ignore: Do not output any warnings or errors, the action does not fail

  if-no-files-found: # optional, default is warn
    # Duration after which artifact will expire in days. 0 means using default retention.
Minimum 1 day. Maximum 90 days unless changed from the repository settings page.

    retention-days: # optional
    # The level of compression for Zlib to be applied to the artifact archive. The value can range from 0 to 9: - 0: No compression - 1: Best speed - 6: Default compression (same as GNU Gzip) - 9: Best compression Higher levels will result in better compression, but will take longer to complete. For large files that are not easily compressed, a value of 0 is recommended for significantly faster uploads.

    compression-level: # optional, default is 6
    # If true, an artifact with a matching name will be deleted before a new one is uploaded. If false, the action will fail if an artifact for the given name already exists. Does not fail if the artifact does not exist.

    overwrite: # optional, default is false
    # If true, hidden files will be included in the artifact. If false, hidden files will be excluded from the artifact.

    include-hidden-files: # optional, default is false
          
